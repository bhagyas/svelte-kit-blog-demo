{"metadata":{"title":"Create Your Blog with SvelteKit","date":"Apr 3, 2021","excerpt":"It's time to rewrite your blog in SvelteKit!"},"content":"<p>Recently, SvelteKit is <a href=\"https://svelte.dev/blog/sveltekit-beta\">released in public beta</a>. And we could finally see what Rich Harris called \"<a href=\"https://www.youtube.com/watch?v=qSfdtmcZ4d0\">Futuristic Web Development</a>\" is made of. It's always better to learn with project, so I made this little blog (the one you are reading) with SvelteKit and deployed it on the Github Pages. And there are things I learnt.</p>\n<h2>Brief Intro of Svelte and SvelteKit</h2>\n<p>For those who are not familiar with Svelte and SvelteKit:</p>\n<p><a href=\"https://svelte.dev/\">Svelte</a> is a reactive Web framework. Unlike traditionaly frameworks like React and Vue, Svelte does not use virtual dom (vdom), but instead compiles the app to vanilla js during building. This results in a extreme small bundle and blazing fast speed, as the app no longer contains runtime code and has get rid of the overheads of all sorts of vdom computation. In addition, Svelte is designed to be very close to plain HTML and CSS, which makes the code clean and easy to read.</p>\n<p><a href=\"https://kit.svelte.dev/\">SvelteKit</a> is the framework for building Svelte based app. With the help of <a href=\"https://vitejs.dev/\">Vite</a>, SvelteKit provides excellent developing experience.</p>\n<p>I'm not going to introduce introduce how to use Svelte and SvelteKit in this series of posts, as the official doc has done a great job. It's very recommended to go through the <a href=\"https://svelte.dev/tutorial/basics\">Svelte tutorial</a> and the <a href=\"https://kit.svelte.dev/docs\">SvelteKit doc</a> first.</p>\n<h2>Read the markdown files</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// [slug].json.js</span>\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">{ params }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { slug } = params;\n\n  <span class=\"hljs-keyword\">let</span> data = fs.readSync(<span class=\"hljs-string\">`src/posts/<span class=\"hljs-subst\">${slug}</span>.md`</span>);\n  ...\n}\n</code></pre>\n<h2>Parse the markdown with remark</h2>\n<h2>Rendered the generated html</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">\"module\"</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">load</span>(<span class=\"hljs-params\">{ page, fetch }</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> slug = page.params.slug;\n    <span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/<span class=\"hljs-subst\">${slug}</span>.json`</span>)\n        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">r</span>) =></span> r.json());\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">props</span>: { post }\n    };\n  }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n{@html post.content}\n</code></pre>\n<h2>Tips</h2>\n<p>Some confusing errrors could be solved by moving the dependencies to <code>devDependencies</code> due to some bugs of Vite.</p>"}