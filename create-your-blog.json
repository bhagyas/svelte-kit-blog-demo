{"metadata":{"title":"Create Your Blog with SvelteKit","date":"Apr 3, 2021","excerpt":"It's time to rewrite your blog in SvelteKit!"},"content":"<p>Recently, SvelteKit is <a href=\"https://svelte.dev/blog/sveltekit-beta\">released in public beta</a>. And we could finally see what Rich Harris called \"<a href=\"https://www.youtube.com/watch?v=qSfdtmcZ4d0\">Futuristic Web Development</a>\" is made of. It's always better to learn with project, so I made this little blog (the one you are reading) with SvelteKit and deployed it on the Github Pages. And there are things I learnt.</p>\n<h2>Brief Intro of Svelte and SvelteKit</h2>\n<p>For those who are not familiar with Svelte and SvelteKit:</p>\n<p><a href=\"https://svelte.dev/\">Svelte</a> is a reactive Web component framework. Unlike traditionaly counterparts like React and Vue, Svelte does not use virtual dom (vdom), but instead compiles the app to vanilla js during building. This results in an extreme small bundle size and blazing fast speed, as the app no longer contains runtime code and has get rid of the overheads of vdom relevant computation. In addition, Svelte is designed to be very close to plain HTML and CSS, which makes the code clean and easy to read.</p>\n<p><a href=\"https://kit.svelte.dev/\">SvelteKit</a> is the framework for building Svelte based app. With the help of <a href=\"https://vitejs.dev/\">Vite</a>, SvelteKit provides excellent developing experience.</p>\n<h2>Minimal SvelteKit Tutorial</h2>\n<p>I'm not going to introduce how to use Svelte in this series of posts, as the official doc has done a great job. As for SvelteKit, I will try to cover only the bits and bobs used for the blog app. Anyway, it's very recommended to go through the <a href=\"https://svelte.dev/tutorial/basics\">Svelte tutorial</a> and the <a href=\"https://kit.svelte.dev/docs\">SvelteKit doc</a>.</p>\n<h3>Routing and Layout</h3>\n<p>Our blog will contain 3 types of pages:</p>\n<ul>\n<li>index page: show the list of post titles</li>\n<li>post page: render markdown file into beautiful html</li>\n<li>about page: show about information</li>\n</ul>\n<p>In SvelteKit, we have a so-called <em>a filesystem-based router</em>. The files in <code>src/route</code> will correspond to the actual webpage. In our case, the folder structure of <code>src/route</code> would be:</p>\n<pre><code class=\"hljs language-stylus\">route\n├── <span class=\"hljs-variable\">$layout</span><span class=\"hljs-selector-class\">.svelte</span>\n├── about<span class=\"hljs-selector-class\">.svelte</span>\n├── <span class=\"hljs-selector-attr\">[slug]</span><span class=\"hljs-selector-class\">.svelte</span>\n└── index<span class=\"hljs-selector-class\">.svelte</span>\n</code></pre>\n<p>where <code>about.svelte</code> will be <code>xxx.com/about</code>, <code>index.svelte</code> will be <code>xxx.com/</code>. As for the <code>[slug].svelte</code>, it is a dynamic route, whose dynamic parameter is the <code>slug</code> in the bracket. For example, we may have a generated <code>xxx.com/hello-world</code>, then SvelteKit will use <code>[slug].svelte</code> to generate this page and set <code>slug</code> to <code>hello-world</code>.</p>\n<p>The remaining <code>$layout.svelte</code> file serves as the layout template, all other files will be rendered inside the <code>&#x3C;slot>&#x3C;/slot></code> of it.</p>\n<h3>Import Components</h3>\n<p>A typical use of the layout file is adding a navigation bar. In SvelteKit, we should put the extracted components in <code>src/lib</code> and use the <code>$lib/xxx</code> to import them. In our case, I added a <code>Nav.svelte</code> in <code>src/lib</code>:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&#x3C;!--lib/Nav.svelte--></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">nav</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"home\"</span>></span>HOME<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"/about\"</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h3</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"about\"</span>></span>about<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h3</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">nav</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<p>And in <code>$layout.svelte</code>, I can import the <code>Nav</code> component in this way:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'../app.scss'</span>;\n  <span class=\"hljs-keyword\">import</span> Nav <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'$lib/Nav.svelte'</span>;\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"g-app-wrapper\"</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Nav</span>/></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">slot</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">slot</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n</code></pre>\n<h3>EndPoints and Data Loading</h3>\n<p>With routing, layout and components, we could build most of the blog.  But there is one important question: how should we get the markdown file and render it to beautiful html? I'll talk about the details about how to parse the markdown file with <code>remark</code> later. For now, let's take a step back: we need to understand how SvelteKit would load the data from server to browser.</p>\n<p>In SvelteKit, data are transfered in JSON format. For each page component that requires data, we need to create a corresponding <code>.json.js</code> as the endpoints. <strong>Endpoints</strong> in SvelteKit are those <code>.js</code> (or <code>.ts</code> if you are using TypeScript) files that contains functions for HTTP methos. For example, in the index page, we need to get the list of post titles from the server (assume we are hosting the app with a server instead of generating static pages), therefore, we need to create a <code>index.json.js</code> file with a <code>get</code> function:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">let</span> posts = fs.readdirSync(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${baseDir}</span>`</span>)\n      .filter(<span class=\"hljs-function\"><span class=\"hljs-params\">fileName</span> =></span> <span class=\"hljs-regexp\">/.+\\.md$/</span>.test(fileName))\n      .map(<span class=\"hljs-function\"><span class=\"hljs-params\">fileName</span> =></span> {\n        <span class=\"hljs-keyword\">const</span> { metadata } = process(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${baseDir}</span>/<span class=\"hljs-subst\">${fileName}</span>`</span>);\n        <span class=\"hljs-keyword\">return</span> {\n          metadata,\n          <span class=\"hljs-attr\">slug</span>: fileName.slice(<span class=\"hljs-number\">0</span>, -<span class=\"hljs-number\">3</span>)\n        };\n      });\n  <span class=\"hljs-comment\">// sort the posts by create date.</span>\n  posts.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> (dayjs(a.metadata.date, <span class=\"hljs-string\">\"MMM D, YYYY\"</span>) -\n                        dayjs(b.metadata.date, <span class=\"hljs-string\">\"MMM D, YYYY\"</span>)));\n  <span class=\"hljs-keyword\">let</span> body = <span class=\"hljs-built_in\">JSON</span>.stringify(posts);\n\n  <span class=\"hljs-keyword\">return</span> {\n    body\n  }\n}\n</code></pre>\n<h2>Read the markdown files</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// [slug].json.js</span>\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'fs'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">{ params }</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { slug } = params;\n\n  <span class=\"hljs-keyword\">let</span> data = fs.readSync(<span class=\"hljs-string\">`src/posts/<span class=\"hljs-subst\">${slug}</span>.md`</span>);\n  ...\n}\n</code></pre>\n<h2>Parse the markdown with remark</h2>\n<h2>Rendered the generated html</h2>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">context</span>=<span class=\"hljs-string\">\"module\"</span>></span><span class=\"javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">load</span>(<span class=\"hljs-params\">{ page, fetch }</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> slug = page.params.slug;\n    <span class=\"hljs-keyword\">const</span> post = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/<span class=\"hljs-subst\">${slug}</span>.json`</span>)\n        .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">r</span>) =></span> r.json());\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">props</span>: { post }\n    };\n  }\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n{@html post.content}\n</code></pre>\n<h2>Tips</h2>\n<p>Some confusing errrors could be solved by moving the dependencies to <code>devDependencies</code> due to some bugs of Vite.</p>"}